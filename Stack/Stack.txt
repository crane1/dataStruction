数据结构与算法	第五天	栈

数据结构与算法	第三天	线性表（一）
1 定义
    栈(Stack)：是限定仅在表尾进行插入和删除操作的线性表。
    我们把允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)，不含任何数据元素的栈称为空栈。栈又称为后进先出(Last In First Out)的线性表，简称LIFO结构。
    栈的插入操作，叫做进栈，也称压栈、入栈。
    栈的删除操作，叫做出栈，有时也叫弹栈。
2 线性表的抽象数据类型
    ADT 栈（stack）
    Data
        同线性表。元素具有相同的类型，相邻元素具有前驱和后继关系。
    Operation
        InitStack(*S)： 初始化操作，建立一个空栈S。
        DestroyStack(*S): 若栈存在，则销毁它。
        ClearStack(*S)： 将栈清空。
        StackEmpty(S): 若栈为空，返回true，否则返回false。
        GetTop(S, *e): 若栈存在且非空，用e返回S的栈顶元素。
        Push(*S, e)： 若栈S存在，插入新元素e到栈S中并称为栈顶元素。
        Pop(*S, *e)： 删除栈S中栈顶元素，并用e返回其值。
        StackLength(S)： 返回栈S的元素个数。
    endADT
3 栈的顺序存储结构
    我们定义一个top变量来指示栈顶元素在数组中的位置。若存储栈的长度为StackSize，则栈顶位置top必须小余StackSize。当栈存在一个元素时，top等于0，因此通常把空栈的判定条件定位top等于-1.

    3.1 定义：
    typedef int SElemType;  // SElemType类型根据实际情况而定，这里假设为int
    typedef struct{
        SElemType data[MAXSIZE];
        int top;    //用于栈顶指针
    }SqStack;

    3.2 进栈操作
    //插入元素e为新的栈顶元素
    Status Push(SqStack *S, SElemType e){
        if(S->top == MAXSIZE -1)    //栈满
            return ERROR;
        S->top++;   //栈顶指针增加一
        S->data[S->top] = e;    //将新插入元素赋值给栈顶空间
        return OK;
    }

    3.3 出栈操作
    //若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK； 否则返回ERROR
    Status Pop(SqStack *S, SElemType *e){
        if(S->top == -1)
            return ERROR;
        *e = S->data[S->top];   //将要删除的栈顶元素赋值给e
        S->top--;   //栈顶指针减一
        return OK;
    }

    两者没有涉及到任何循环语句，因此时间复杂度均是O(1)。

4 栈的链式存储结构
    对于空栈来说，链表原定义是头指针指向空，那么链栈的空其实就是top=NULL的时候。
    4.1 链栈的结构代码如下：
    typedef struct StackNode{
        SElemType data;
        struct StackNode *next;
    }StackNode, *LinkStackPtr;

    typedef struct LinkStack{
        LinkStackPtr pop;
        int count;
    }LinkStack;

    4.2 进栈操作
    //插入元素e为新的栈顶元素
    Status Push(LinkStack *S, SElemType e){
        LinkStackPtr s = (LinkStackPtr)malloc(sizeof(StackNode));
        s->data = e;
        s->next = S->top;   //把当前的栈顶元素赋值给新结点的直接后继
        S->top = s; //将新结点s赋值给栈顶指针
        S->count++;
        return OK;
    }

    4.3 出栈操作
    //若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK； 否则返回ERROR
    Status Pop(LinkStack *S, SElemType *e){
        LinkStackPtr p;
        if(StackEmpty(*S))
            return ERROR;
        *e = S->top->data;
        p = S->top; //将栈顶结点赋值给p
        S->top = S->top->next;  //使得栈顶指针下移一位，指向后一结点
        free(p);    //释放结点p
        S->count--;
        return OK;
    }

    链栈的进栈push和出栈pop操作没有任何循环操作，因此时间复杂度均是O(1)。
    如果栈的使用过程中元素变化不可预料，有时很小，有时非常大，那么最好是用链栈，反之，如果它的变化在可控范围内，建议使用顺序栈会更好一些。
